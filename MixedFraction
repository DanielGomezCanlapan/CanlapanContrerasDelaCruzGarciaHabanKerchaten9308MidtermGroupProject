
    }

    /**
     *-----
     */
    public MixedFraction(Fraction fraction) {
        super(fraction.getNumerator() % fraction.getDenominator(), fraction.getDenominator());
        wholeNum = fraction.getNumerator() / fraction.getDenominator();
    }

    /**
     * -----
     */
    public void setWholeNumber(int wholeNumber) {
        this.wholeNum = wholeNumber;
    }

    /**
     * -----
     */
    public void setFraction(Fraction fraction) {
        setNumerator(fraction.getNumerator());
        setDenominator(fraction.getDenominator());
    }

    /**
     * -----
     */
    public int getWholeNumberPart() {
        return wholeNum;
    }

    /**
     * -----
     */
    public Fraction getFractionPart() {
        return new Fraction(getNumerator(), getDenominator());
    }

    /**
     * -----
     */
    public Fraction toFraction() {
        if (wholeNum < 0) {
            wholeNum *= -1;
            setNumerator(getNumerator() * -1);
        }
        if (getNumerator() < 0) {
            return new Fraction(getNumerator() + (-wholeNum * getDenominator()), getDenominator());
        }
        return new Fraction(getNumerator() + (wholeNum * getDenominator()), getDenominator());
    }

    /**
     * ------
     */
    @Override
    public String toString() {
        return (wholeNum == 0) ? getFractionPart().toString() :
                (getFractionPart().getNumerator() == 0) ? String.valueOf(wholeNum) :
                        wholeNum + " " + getFractionPart().toString();
    }

    /**
     * ------
     */
    @Override
    public double toDouble() {
        return wholeNum + getFractionPart().toDouble();
    }

    /**
     * ------
     */
    @Override
    public MixedFraction add(Fraction other) {
        if (other instanceof MixedFraction) {
            return new MixedFraction(toFraction().add(((MixedFraction) other).toFraction()));
        }
        return new MixedFraction(toFraction().add(other));
    }

    /**
     *------
     */
    @Override
    public MixedFraction subtract(Fraction other) {
        if (other instanceof MixedFraction) {
            return new MixedFraction(toFraction().subtract(((MixedFraction) other).toFraction()));
        }
        return new MixedFraction(toFraction().subtract(other));
    }

    /**
     * -----
     */

    public MixedFraction multiplyBy(Fraction other) {
        if (other instanceof MixedFraction) {
            return new MixedFraction(toFraction().multiplyBy(((MixedFraction) other).toFraction()));
        }
        return new MixedFraction(toFraction().multiplyBy(other));
    }

    /**
     * ------
     */

    public MixedFraction divideBy(Fraction other) {
        if (other instanceof MixedFraction) {
            return new MixedFraction(toFraction().divide(((MixedFraction) other).toFraction()));
        }
        return new MixedFraction(toFraction().divide(other));
    }

    /**
     *-----
     */

    public MixedFraction simplifyFraction() {
        return new MixedFraction(toFraction().simplifyFraction());
    }
}
    }
}

